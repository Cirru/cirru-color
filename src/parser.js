// Generated by CoffeeScript 1.6.3
(function() {
  var State, tokenize;

  State = (function() {
    function State() {
      this.list = ['line', 'func'];
    }

    State.prototype.get = function() {
      var last;
      last = this.list[this.list.length - 1];
      if (last == null) {
        throw new Error('Empty state list');
      }
      return last;
    };

    State.prototype.push = function(state) {
      console.log('push state:', state, '->>', this.list);
      return this.list.push(state);
    };

    State.prototype.pop = function(message) {
      var state;
      state = this.list.pop();
      return console.log('pop state:', state, '->>', this.list, message);
    };

    return State;

  })();

  tokenize = function(line) {
    var collection, count, isClose, isDollar, isEscape, isEscapeContent, isFunc, isFuncClose, isFuncString, isOpen, isPara, isString, isStringContent, isStringEnd, isWhitespace, rules, state;
    state = new State;
    collection = [];
    console.group('tokenize');
    isWhitespace = function() {
      var whitespace;
      if (whitespace = line.match(/^\s+/)) {
        collection.push({
          type: 'whitespace',
          text: whitespace[0]
        });
        line = line.slice(whitespace[0].length);
        return true;
      } else {
        return false;
      }
    };
    isFunc = function() {
      var func;
      if (func = line.match(/^[^\"\(\)\$\s]+/)) {
        collection.push({
          type: 'func',
          text: func[0]
        });
        state.pop('func end');
        line = line.slice(func[0].length);
        return true;
      } else {
        return false;
      }
    };
    isPara = function() {
      var para;
      if (para = line.match(/^[^\"\(\)\$\s]+/)) {
        collection.push({
          type: 'para',
          text: para[0]
        });
        line = line.slice(para[0].length);
        return true;
      } else {
        return false;
      }
    };
    isDollar = function() {
      var dollar;
      if ((dollar = line[0]) === '$') {
        collection.push({
          type: 'dollar',
          text: dollar
        });
        state.push('func');
        line = line.slice(1);
        return true;
      } else {
        return false;
      }
    };
    isClose = function() {
      var close;
      if (close = line.match(/^\)/)) {
        collection.push({
          type: 'punc',
          text: ')'
        });
        line = line.slice(1);
        return true;
      } else {
        return false;
      }
    };
    isFuncClose = function() {
      var close;
      if (close = line.match(/^\)/)) {
        collection.push({
          type: 'punc',
          text: ')'
        });
        state.pop('close');
        line = line.slice(1);
        return true;
      } else {
        return false;
      }
    };
    isOpen = function() {
      var open;
      if (open = line.match(/^\(/)) {
        collection.push({
          type: 'punc',
          text: '('
        });
        line = line.slice(1);
        state.push('func');
        return true;
      } else {
        return false;
      }
    };
    isString = function() {
      var open;
      if (open = line.match(/^\"\b/)) {
        collection.push({
          type: 'string',
          text: '"'
        });
        line = line.slice(1);
        state.push('string');
        return true;
      } else {
        return false;
      }
    };
    isFuncString = function() {
      var open;
      if (open = line.match(/^\"\b/)) {
        collection.push({
          type: 'string',
          text: '"'
        });
        line = line.slice(1);
        state.pop('func string');
        state.push('string');
        return true;
      } else {
        return false;
      }
    };
    isStringContent = function() {
      var content;
      if (content = line.match(/^[^\"\\]+/)) {
        collection.push({
          type: 'string-text',
          text: content[0]
        });
        line = line.slice(content[0].length);
        return true;
      } else {
        return false;
      }
    };
    isEscape = function() {
      var punc;
      if (punc = line[0] === '\\') {
        collection.push({
          type: 'escape',
          text: '\\'
        });
        line = line.slice(1);
        state.push('escape');
        return true;
      } else {
        return false;
      }
    };
    isEscapeContent = function() {
      var content;
      if ((content = line[0]) != null) {
        collection.push({
          type: 'escape-text',
          text: content
        });
        line = line.slice(1);
        state.pop('escape end');
        return true;
      } else {
        return false;
      }
    };
    isStringEnd = function() {
      var content;
      if ((content = line[0]) === '"') {
        collection.push({
          type: 'string',
          text: '"'
        });
        line = line.slice(1);
        state.pop('string end');
        return true;
      } else {
        return false;
      }
    };
    rules = {
      string: function() {
        if (isEscape()) {
          return;
        }
        if (isStringEnd()) {
          return;
        }
        if (isStringContent()) {
          return;
        }
        return new Error("not in string grammar: >>>" + line + "<<<");
      },
      func: function() {
        if (isWhitespace()) {
          return;
        }
        if (isFunc()) {
          return;
        }
        if (isDollar()) {
          return;
        }
        if (isFuncClose()) {
          return;
        }
        if (isOpen()) {
          return;
        }
        if (isFuncString()) {
          return;
        }
        return new Error("not in func grammar: >>>" + line + "<<<");
      },
      escape: function() {
        if (isEscapeContent()) {
          return;
        }
        return new Error("not in escape grammar: >>>" + line + "<<<");
      },
      line: function() {
        if (isWhitespace()) {
          return;
        }
        if (isPara()) {
          return;
        }
        if (isOpen()) {
          return;
        }
        if (isClose()) {
          return;
        }
        if (isDollar()) {
          return;
        }
        if (isString()) {
          return;
        }
        return new Error("not in line grammar: >>>" + line + "<<<");
      }
    };
    count = 0;
    console.log('state is:', state.list, line);
    while (line.length > 0) {
      rules[state.get()]();
      count += 1;
      if (count > 400) {
        console.warn("failed at line: >>>" + line + "<<< when >>>" + (state.get()) + "<<<");
        break;
      }
    }
    console.groupEnd('tokenize');
    return collection;
  };

  define(function(require, exports) {
    return function(code) {
      var lines;
      return lines = code.split('\n').map(tokenize);
    };
  });

}).call(this);

/*
//@ sourceMappingURL=parser.map
*/
